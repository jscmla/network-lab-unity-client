// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mtracker.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mtracker {
  public static partial class MtrackerService
  {
    static readonly string __ServiceName = "mtracker.MtrackerService";

    static readonly grpc::Marshaller<global::Mtracker.Null> __Marshaller_mtracker_Null = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mtracker.Null.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mtracker.User> __Marshaller_mtracker_User = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mtracker.User.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mtracker.OwnTrackedObject> __Marshaller_mtracker_OwnTrackedObject = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mtracker.OwnTrackedObject.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mtracker.OtherTrackedObjects> __Marshaller_mtracker_OtherTrackedObjects = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mtracker.OtherTrackedObjects.Parser.ParseFrom);

    static readonly grpc::Method<global::Mtracker.Null, global::Mtracker.User> __Method_Login = new grpc::Method<global::Mtracker.Null, global::Mtracker.User>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_mtracker_Null,
        __Marshaller_mtracker_User);

    static readonly grpc::Method<global::Mtracker.User, global::Mtracker.User> __Method_Logout = new grpc::Method<global::Mtracker.User, global::Mtracker.User>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Logout",
        __Marshaller_mtracker_User,
        __Marshaller_mtracker_User);

    static readonly grpc::Method<global::Mtracker.OwnTrackedObject, global::Mtracker.Null> __Method_TransportOwnObject = new grpc::Method<global::Mtracker.OwnTrackedObject, global::Mtracker.Null>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "TransportOwnObject",
        __Marshaller_mtracker_OwnTrackedObject,
        __Marshaller_mtracker_Null);

    static readonly grpc::Method<global::Mtracker.User, global::Mtracker.OtherTrackedObjects> __Method_TransportOtherObject = new grpc::Method<global::Mtracker.User, global::Mtracker.OtherTrackedObjects>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "TransportOtherObject",
        __Marshaller_mtracker_User,
        __Marshaller_mtracker_OtherTrackedObjects);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mtracker.MtrackerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MtrackerService</summary>
    [grpc::BindServiceMethod(typeof(MtrackerService), "BindService")]
    public abstract partial class MtrackerServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Mtracker.User> Login(global::Mtracker.Null request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mtracker.User> Logout(global::Mtracker.User request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Mtracker.Null> TransportOwnObject(grpc::IAsyncStreamReader<global::Mtracker.OwnTrackedObject> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task TransportOtherObject(global::Mtracker.User request, grpc::IServerStreamWriter<global::Mtracker.OtherTrackedObjects> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MtrackerService</summary>
    public partial class MtrackerServiceClient : grpc::ClientBase<MtrackerServiceClient>
    {
      /// <summary>Creates a new client for MtrackerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MtrackerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MtrackerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MtrackerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MtrackerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MtrackerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Mtracker.User Login(global::Mtracker.Null request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mtracker.User Login(global::Mtracker.Null request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mtracker.User> LoginAsync(global::Mtracker.Null request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mtracker.User> LoginAsync(global::Mtracker.Null request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      public virtual global::Mtracker.User Logout(global::Mtracker.User request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Logout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mtracker.User Logout(global::Mtracker.User request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Logout, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Mtracker.User> LogoutAsync(global::Mtracker.User request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Mtracker.User> LogoutAsync(global::Mtracker.User request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Logout, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Mtracker.OwnTrackedObject, global::Mtracker.Null> TransportOwnObject(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransportOwnObject(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Mtracker.OwnTrackedObject, global::Mtracker.Null> TransportOwnObject(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_TransportOwnObject, null, options);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Mtracker.OtherTrackedObjects> TransportOtherObject(global::Mtracker.User request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransportOtherObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Mtracker.OtherTrackedObjects> TransportOtherObject(global::Mtracker.User request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_TransportOtherObject, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MtrackerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MtrackerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MtrackerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Login, serviceImpl.Login)
          .AddMethod(__Method_Logout, serviceImpl.Logout)
          .AddMethod(__Method_TransportOwnObject, serviceImpl.TransportOwnObject)
          .AddMethod(__Method_TransportOtherObject, serviceImpl.TransportOtherObject).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MtrackerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Login, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mtracker.Null, global::Mtracker.User>(serviceImpl.Login));
      serviceBinder.AddMethod(__Method_Logout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mtracker.User, global::Mtracker.User>(serviceImpl.Logout));
      serviceBinder.AddMethod(__Method_TransportOwnObject, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Mtracker.OwnTrackedObject, global::Mtracker.Null>(serviceImpl.TransportOwnObject));
      serviceBinder.AddMethod(__Method_TransportOtherObject, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mtracker.User, global::Mtracker.OtherTrackedObjects>(serviceImpl.TransportOtherObject));
    }

  }
}
#endregion
